<style>
    .list-group {
        max-height: 1000px;
        margin-bottom: 10px;
        overflow: scroll;
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
    }

    .legend {
        background-color: #fff;
        border-radius: 3px;
        bottom: 30px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.10);
        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
        padding: 10px;
        position: absolute;
        right: 10px;
        z-index: 1;
    }

        .legend h4 {
            margin: 0 0 10px;
        }

        .legend div span {
            border-radius: 50%;
            display: inline-block;
            height: 10px;
            margin-right: 5px;
            width: 10px;
        }
</style>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>RegionalVIC - Explore Regional Victoria</title>
    <!-- Custom fonts for this template -->
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
    <link href='https://fonts.googleapis.com/css?family=Kaushan+Script' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700' rel='stylesheet' type='text/css'>
    <!-- Custom styles for this template -->
    <link href="/css/agency.min.css" rel="stylesheet">

    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.1/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.1/mapbox-gl.css' rel='stylesheet' />
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

    <!-- Bootstrap core JavaScript -->
    <script src="/vendor/jquery/jquery.min.js"></script>
    <script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- Plugin JavaScript -->
    <script src="/vendor/jquery-easing/jquery.easing.min.js"></script>
    <!-- Contact form JavaScript -->
    <script src="/js/jqBootstrapValidation.js"></script>
    <script src="/js/contact_me.js"></script>


    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.6/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.6/mapbox-gl-geocoder.css' type='text/css' />


    <!-- Bootstrap core CSS -->
    <link href="/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom fonts for this template -->
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
    <link href='https://fonts.googleapis.com/css?family=Kaushan+Script' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Roboto+Slab:400,100,300,700' rel='stylesheet' type='text/css'>
    <!-- Custom styles for this template -->
    <link href="/css/agency.min.css" rel="stylesheet">
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-dark fixed-top" id="mainNav">
        <div class="container">
            <a class="navbar-brand js-scroll-trigger" href="/">RegionVIC</a>
            <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
                Menu
                <i class="fas fa-bars"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav text-uppercase ml-auto">
                    <li class="nav-item">
                        <a class="nav-link js-scroll-trigger" href="#services">Services</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link js-scroll-trigger" href="#portfolio">Portfolio</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link js-scroll-trigger" href="#about">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link js-scroll-trigger" href="#team">Team</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link js-scroll-trigger" href="#contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <!-- Header -->
    <header class="masthead">
        <div class="container">
            <div class="intro-normal">
                <div class="intro-lead-in"></div>
            </div>
        </div>
    </header>

    <section id="services">
        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <div id="map" style="height:500px"></div>
                    <div id='state-legend' class='legend' style="display: none">
                        <h4>House Price</h4>
                        <div><span style='background-color: #723122'></span>550</div>
                        <div><span style='background-color: #8B4225'></span>450</div>
                        <div><span style='background-color: #A25626'></span>350</div>
                        <div><span style='background-color: #B86B25'></span>300</div>
                        <div><span style='background-color: #CA8323'></span>250</div>
                        <div><span style='background-color: #DA9C20'></span>200</div>
                        <div><span style='background-color: #E6B71E'></span>150</div>
                        <div><span style='background-color: #EED322'></span>150</div>
                        <div><span style='background-color: #F2F12D'></span>50</div>
                    </div>

                    <div id='state-crime-legend' class='legend' style="display: none">
                        <h4>Crime rate</h4>
                        <div><span style='background-color: #723122'></span>10%</div>
                        <div><span style='background-color: #8B4225'></span>8%</div>
                        <div><span style='background-color: #A25626'></span>7%</div>
                        <div><span style='background-color: #B86B25'></span>6%</div>
                        <div><span style='background-color: #CA8323'></span>5%</div>
                        <div><span style='background-color: #DA9C20'></span>4%</div>
                        <div><span style='background-color: #E6B71E'></span>3%</div>
                        <div><span style='background-color: #EED322'></span>2%</div>
                        <div><span style='background-color: #F2F12D'></span>1%</div>
                    </div>
                </div>
                <div class="col-md-4">

                    <ul class="nav nav-tabs">
                        <li class="active"><a data-toggle="tab" href="#home">Accomondation</a></li>
                        <li><a data-toggle="tab" href="#satety">Satety</a></li>
                    </ul>

                    <div class="tab-content">
                        <div id="home" class="tab-pane fade in active">
                            <h2>Accomondation</h2>

                            <h3>Pick your desired house type and size</h3>

                            <div class="form-group">
                                <label for="sel1">Num of bedroom:</label>
                                <select class="form-control" id="sel1">
                                    <option>1</option>
                                    <option>2</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="sel2">Type:</label>
                                <select class="form-control" id="sel2">
                                    <option>House</option>
                                    <option>Flat</option>
                                </select>
                            </div>
                            @*<p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>*@
                            @*<p><a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>*@
                            <button type="button" class="btn btn-primary" onclick="choropleth('a')">Show</button>
                            <button type="button" class="btn btn-primary" onclick="resetLayer()">Reset</button>

                            @*<canvas id="myChart"></canvas>*@

                            <div class="form-group">
                                <label for="bgt">Budget:</label>
                                <input type="text" class="form-control" id="bgt">
                            </div>
                            <button type="button" class="btn btn-primary" onclick="filter()">Search</button>

                            <div id='list' class="list-group">
                                <a href="#" class="list-group-item list-group-item-action flex-column align-items-start active">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h5 class="mb-1">List group item heading</h5>
                                        <small>3 days ago</small>
                                    </div>
                                    <p class="mb-1">Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius blandit.</p>
                                    <small>Donec id elit non mi porta.</small>
                                </a>
                                
                            </div>

                        </div>
                        <div id="satety" class="tab-pane fade">
                            <h3>Satety</h3>
                            <button type="button" class="btn btn-primary" onclick="choropleth('s')">Show</button>
                            <button type="button" class="btn btn-primary" onclick="resetLayer()">Reset</button>

                        </div>
                    </div>


                </div>
            </div>
        </div>
    </section>


    <script>
        var lines;
        var table;
        var crimeTable;

        var allCode = [20110, 20260, 20570, 20660, 20740, 20830, 20910, 21010, 21110, 21180, 21270, 21370, 21450, 21610, 21670, 21750, 21830, 21890, 22110, 22170, 22250, 22310, 22410, 22490, 22620, 22670, 22750, 22830, 22910, 22980, 23110, 23190, 23270, 23350, 23430, 23670, 23810, 23940, 24130, 24210, 24250, 24330, 24410, 24600, 24650, 24780, 24850, 24900, 24970, 25060, 25150, 25250, 25340, 25430, 25490, 25620, 25710, 25810, 25900, 25990, 26080, 26170, 26260, 26350, 26430, 26490, 26610, 26670, 26700, 26730, 26810, 26890, 26980, 27070, 27170, 27260, 27350, 27450, 27630, 29399, 29499, 29799];

        const TOKEN = "pk.eyJ1Ijoia2FzYWx1b3FpIiwiYSI6ImNqbHZ2OW53bTB5aHozcW9kcDJibndycXUifQ.SeWM7HbI0owT-Rwuv14Ntg";

        mapboxgl.accessToken = TOKEN;
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/light-v9',
            //style: 'mapbox://styles/mapbox/light-v9',
            center: [145.045837, -37.876823],
            zoom: 6
        });

        var hoveredStateId = null;
        var highlightedStateId = null;


        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
        var myData;
        var rcMap;
        var cheo = new Object;
        var crimeCheo = new Object;
        function formRegionColorMap() {
            rcMap = new Map();
            rcMap.set('20110', getRandomColor());
            rcMap.set('20260', getRandomColor());
            rcMap.set('20570', getRandomColor());
            rcMap.set('20660', getRandomColor());
            rcMap.set('20740', getRandomColor());
            rcMap.set('20830', getRandomColor());
            rcMap.set('20910', getRandomColor());
            rcMap.set('21010', getRandomColor());
            rcMap.set('21110', getRandomColor());
            rcMap.set('21180', getRandomColor());
            rcMap.set('21270', getRandomColor());
            rcMap.set('21370', getRandomColor());
            rcMap.set('21450', getRandomColor());
            rcMap.set('21610', getRandomColor());
            rcMap.set('21670', getRandomColor());
            rcMap.set('21750', getRandomColor());
            rcMap.set('21830', getRandomColor());
            rcMap.set('21890', getRandomColor());
            rcMap.set('22110', getRandomColor());
            rcMap.set('22170', getRandomColor());
            rcMap.set('22250', getRandomColor());
            rcMap.set('22310', getRandomColor());
            rcMap.set('22410', getRandomColor());
            rcMap.set('22490', getRandomColor());
            rcMap.set('22620', getRandomColor());
            rcMap.set('22670', getRandomColor());
            rcMap.set('22750', getRandomColor());
            rcMap.set('22830', getRandomColor());
            rcMap.set('22910', getRandomColor());
            rcMap.set('22980', getRandomColor());
            rcMap.set('23110', getRandomColor());
            rcMap.set('23190', getRandomColor());
            rcMap.set('23270', getRandomColor());
            rcMap.set('23350', getRandomColor());
            rcMap.set('23430', getRandomColor());
            rcMap.set('23670', getRandomColor());
            rcMap.set('23810', getRandomColor());
            rcMap.set('23940', getRandomColor());
            rcMap.set('24130', getRandomColor());
            rcMap.set('24210', getRandomColor());
            rcMap.set('24250', getRandomColor());
            rcMap.set('24330', getRandomColor());
            rcMap.set('24410', getRandomColor());
            rcMap.set('24600', getRandomColor());
            rcMap.set('24650', getRandomColor());
            rcMap.set('24780', getRandomColor());
            rcMap.set('24850', getRandomColor());
            rcMap.set('24900', getRandomColor());
            rcMap.set('24970', getRandomColor());
            rcMap.set('25060', getRandomColor());
            rcMap.set('25150', getRandomColor());
            rcMap.set('25250', getRandomColor());
            rcMap.set('25340', getRandomColor());
            rcMap.set('25430', getRandomColor());
            rcMap.set('25490', getRandomColor());
            rcMap.set('25620', getRandomColor());
            rcMap.set('25710', getRandomColor());
            rcMap.set('25810', getRandomColor());
            rcMap.set('25900', getRandomColor());
            rcMap.set('25990', getRandomColor());
            rcMap.set('26080', getRandomColor());
            rcMap.set('26170', getRandomColor());
            rcMap.set('26260', getRandomColor());
            rcMap.set('26350', getRandomColor());
            rcMap.set('26430', getRandomColor());
            rcMap.set('26490', getRandomColor());
            rcMap.set('26610', getRandomColor());
            rcMap.set('26670', getRandomColor());
            rcMap.set('26700', getRandomColor());
            rcMap.set('26730', getRandomColor());
            rcMap.set('26810', getRandomColor());
            rcMap.set('26890', getRandomColor());
            rcMap.set('26980', getRandomColor());
            rcMap.set('27070', getRandomColor());
            rcMap.set('27170', getRandomColor());
            rcMap.set('27260', getRandomColor());
            rcMap.set('27350', getRandomColor());
            rcMap.set('27450', getRandomColor());
            rcMap.set('27630', getRandomColor());
            rcMap.set('29399', getRandomColor());
            rcMap.set('29499', getRandomColor());
            rcMap.set('29799', getRandomColor());

            initialiseColor();
        }

        function initialiseColor() {
            //var myData = { "VIC221": '#EED322', "VIC213": '#627BC1'};
            myData = {
                "20110": rcMap.get('20110'),
                "20260": rcMap.get('20260'),
                "20570": rcMap.get('20570'),
                "20660": rcMap.get('20660'),
                "20740": rcMap.get('20740'),
                "20830": rcMap.get('20830'),
                "20910": rcMap.get('20910'),
                "21010": rcMap.get('21010'),
                "21110": rcMap.get('21110'),
                "21180": rcMap.get('21180'),
                "21270": rcMap.get('21270'),
                "21370": rcMap.get('21370'),
                "21450": rcMap.get('21450'),
                "21610": rcMap.get('21610'),
                "21670": rcMap.get('21670'),
                "21750": rcMap.get('21750'),
                "21830": rcMap.get('21830'),
                "21890": rcMap.get('21890'),
                "22110": rcMap.get('22110'),
                "22170": rcMap.get('22170'),
                "22250": rcMap.get('22250'),
                "22310": rcMap.get('22310'),
                "22410": rcMap.get('22410'),
                "22490": rcMap.get('22490'),
                "22620": rcMap.get('22620'),
                "22670": rcMap.get('22670'),
                "22750": rcMap.get('22750'),
                "22830": rcMap.get('22830'),
                "22910": rcMap.get('22910'),
                "22980": rcMap.get('22980'),
                "23110": rcMap.get('23110'),
                "23190": rcMap.get('23190'),
                "23270": rcMap.get('23270'),
                "23350": rcMap.get('23350'),
                "23430": rcMap.get('23430'),
                "23670": rcMap.get('23670'),
                "23810": rcMap.get('23810'),
                "23940": rcMap.get('23940'),
                "24130": rcMap.get('24130'),
                "24210": rcMap.get('24210'),
                "24250": rcMap.get('24250'),
                "24330": rcMap.get('24330'),
                "24410": rcMap.get('24410'),
                "24600": rcMap.get('24600'),
                "24650": rcMap.get('24650'),
                "24780": rcMap.get('24780'),
                "24850": rcMap.get('24850'),
                "24900": rcMap.get('24900'),
                "24970": rcMap.get('24970'),
                "25060": rcMap.get('25060'),
                "25150": rcMap.get('25150'),
                "25250": rcMap.get('25250'),
                "25340": rcMap.get('25340'),
                "25430": rcMap.get('25430'),
                "25490": rcMap.get('25490'),
                "25620": rcMap.get('25620'),
                "25710": rcMap.get('25710'),
                "25810": rcMap.get('25810'),
                "25900": rcMap.get('25900'),
                "25990": rcMap.get('25990'),
                "26080": rcMap.get('26080'),
                "26170": rcMap.get('26170'),
                "26260": rcMap.get('26260'),
                "26350": rcMap.get('26350'),
                "26430": rcMap.get('26430'),
                "26490": rcMap.get('26490'),
                "26610": rcMap.get('26610'),
                "26670": rcMap.get('26670'),
                "26700": rcMap.get('26700'),
                "26730": rcMap.get('26730'),
                "26810": rcMap.get('26810'),
                "26890": rcMap.get('26890'),
                "26980": rcMap.get('26980'),
                "27070": rcMap.get('27070'),
                "27170": rcMap.get('27170'),
                "27260": rcMap.get('27260'),
                "27350": rcMap.get('27350'),
                "27450": rcMap.get('27450'),
                "27630": rcMap.get('27630'),
                "29399": rcMap.get('29399'),
                "29499": rcMap.get('29499'),
                "29799": rcMap.get('29799')
            };
        }

        var customData = new Object
        

        formRegionColorMap();

        map.on('load', function () {
            // Add a layer showing the places.
            map.addSource("states", {
                "type": "geojson",
                "data": "https://raw.githubusercontent.com/kasaluoqi/root/master/LGA_2018_AUST_VIC_ID.geojson"
            });

            map.addLayer({
                "id": "state-fills",
                "type": "fill",
                "source": "states",
                "layout": { 'visibility': 'visible' },
                "paint": {
                    "fill-color":
                        ["get", ["to-string", ["get", "LGA_CODE18"]], ["literal", myData]],
                    "fill-opacity": ["case",
                        ["boolean", ["feature-state", "hover"], false],
                        0.7,
                        0.3
                    ]
                }
            });

            map.addLayer({
                "id": "cheo",
                "type": "fill",
                "source": "states",
                "layout": { 'visibility': 'none' },
                "paint": {
                    "fill-color":
                        ["get", ["to-string", ["get", "LGA_CODE18"]], ["literal", cheo]],
                    "fill-opacity": 0.7
                }
            });

            map.addLayer({
                "id": "state-borders",
                "type": "line",
                "source": "states",
                "layout": {},
                "paint": {
                    "line-color": "#0000000",
                    "line-width": 2
                }
            });


            // When the user moves their mouse over the state-fill layer, we'll update the
            // feature state for the feature under the mouse.
            map.on("mousemove", "state-fills", function (e) {
                if (e.features.length > 0) {
                    if (hoveredStateId) {
                        map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                    }
                    hoveredStateId = e.features[0].id;
                    map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: true });
                }
            });

            // When the mouse leaves the state-fill layer, update the feature state of the
            // previously hovered feature.
            map.on("mouseleave", "state-fills", function () {
                if (hoveredStateId) {
                    map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                }
                hoveredStateId = null;
            });


            //var ctx = document.getElementById('myChart').getContext('2d');
            //var chart = new Chart(ctx);

            map.on('click', 'state-fills', function (e) {

                var sel1 = jQuery("#sel1 option:selected").val();
                var sel2 = jQuery("#sel2 option:selected").val();
                var lgaCode = e.features[0].properties.LGA_CODE18;
                var name = e.features[0].properties.LGA_NAME18;

                //if (table != null) {
                //    var list = getItems.apply(table, lgaCode, "bedroom", sel1, "type", sel2)
                //    list.sort((a, b) => (a.year > b.year) ? 1 : (getMonthFromString(a.month) > getMonthFromString(b.month)) ? 1 : -1)
                //    var data = [];
                //    var labels = [];
                //    for (var i = 0; i < list.length; i++) {
                //        labels.push(getMonthFromString(getItem(list[i], "month")) + "/" + getItem(list[i], "year"));
                //        data.push(getItem(list[i], "median"));
                //    }
                //    if (data != null && labels != null) {
                //        chart.destroy();
                //        ctx = document.getElementById("myChart").getContext("2d");
                //        chart = new Chart(ctx, {
                //            // The type of chart we want to create
                //            type: 'line',
                //            // The data for our dataset
                //            data: {
                //                labels: labels,
                //                datasets: [{
                //                    label: 'Price median',
                //                    fill: false,
                //                    backgroundColor: 'rgb(255, 99, 132)',
                //                    borderColor: 'rgb(255, 99, 132)',
                //                    data: data
                //                }]
                //            },
                //            // Configuration options go here
                //            options: {
                //                scales: {
                //                    yAxes: [{
                //                        display: true,
                //                        ticks: {
                //                            suggestedMin: 0,    // minimum will be 0, unless there is a lower value.
                //                            // OR //
                //                            beginAtZero: true   // minimum value will be 0.
                //                        }
                //                    }]
                //                }
                //            }
                //        });
                //    }
                //}

                new mapboxgl.Popup()
                    .setLngLat(e.lngLat)
                    .setHTML("LGA Code: " + lgaCode + ", Name: " + name)
                    .addTo(map);
            });
        });
        var filename = "Rental_Report_with_LGA_Code.csv";
        
        $(document).ready(function () {
            $.getJSON('https://raw.githubusercontent.com/kasaluoqi/root/master/LGA_2018_AUST_VIC_ID.geojson', function (data) {
                customData = (data);
            });

            $.ajax({
                type: "GET",
                url: "/Rental_Report_with_LGA_Code.csv",
                dataType: "text",
                success: function (data) {
                    table = processData(data);
                }
            });

            $.ajax({
                type: "GET",
                url: "/Criminal_Incidents_with_LGA_Code.csv",
                dataType: "text",
                success: function (data) {
                    crimeTable = processData(data);
                }
            });
        });

        function readData(filename) {
            $.ajax({
                type: "GET",
                url: "/" + filename,
                dataType: "text",
                success: function (data) {
                    table = processData(data);
                }
            });
        }
        var stateLegend = document.getElementById('state-legend');
        var stateCrimeLegend = document.getElementById('state-crime-legend');
        function resetLayer() {
            
                map.setLayoutProperty("state-fills", 'visibility', 'visible');
                map.setLayoutProperty("cheo", 'visibility', 'none');

            stateLegend.style.display = 'none';
            stateCrimeLegend.style.display = 'none';
        }
        
        function choropleth(option) {

            if (option == "a") {

                stateLegend.style.display = "block"
                stateCrimeLegend.style.display = "none"

                var sel1 = jQuery("#sel1 option:selected").val();
                var sel2 = jQuery("#sel2 option:selected").val();

                for (var i = 0; i < allCode.length; i++) {
                    var tmpList = getItems.call(this, table, allCode[i], "bedroom", sel1, "type", sel2);
                    tmpList.sort((a, b) => (a.year < b.year) ? 1 :
                        (getMonthFromString(a.month) < getMonthFromString(b.month)) ? 1 : -1)

                    cheo[allCode[i]] = getColor(
                        parseInt(
                            getItem(tmpList[0], "median")
                        )
                    )
                }
                map.setPaintProperty("cheo", 'fill-color', ["get", ["to-string", ["get", "LGA_CODE18"]], ["literal", cheo]]);
                
                map.setLayoutProperty("state-fills", 'visibility', 'none');
                map.setLayoutProperty("cheo", 'visibility', 'visible');
            }
            else if (option == "s") {

                stateCrimeLegend.style.display = "block"

                stateLegend.style.display = "none"
                
                    var objects = crimeTable;

                for (var j = 0; j < objects.length; j++) {
                    for (var i = 0; i < allCode.length; i++) {

                        var object = objects[j];
                        if (object != null && object["Year"] != "2018" &&
                            parseInt(object["LGA_Code"]) == allCode[i]) {
                            crimeCheo[allCode[i]] = getCrimeColor(parseFloat(object["Rate"]));
                        }
                    }
                }

                map.setPaintProperty("cheo", 'fill-color', ["get", ["to-string", ["get", "LGA_CODE18"]], ["literal", crimeCheo]]);
                
                map.setLayoutProperty("state-fills", 'visibility', 'none');
                map.setLayoutProperty("cheo", 'visibility', 'visible');

            }

        }

        function forwardGeocoder(query) {
            var matchingFeatures = [];
            for (var i = 0; i < customData.features.length; i++) {
                var feature = customData.features[i];
                // handle queries with different capitalization than the source data by calling toLowerCase()
                if (feature.properties.LGA_NAME18.toLowerCase().search(query.toLowerCase()) !== -1) {
                    // add a tree emoji as a prefix for custom data results
                    // using carmen geojson format: https://github.com/mapbox/carmen/blob/master/carmen-geojson.md
                    feature['place_name'] = '🌲 ' + feature.properties.LGA_NAME18;
                    feature['center'] = feature.geometry.coordinates;
                    matchingFeatures.push(feature);
                }
            }
            return matchingFeatures;
        }

        map.addControl(new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            localGeocoder: forwardGeocoder,
            zoom: 14,
            placeholder: "Enter search e.g. Lincoln Park"
        }));

        // get color depending on population density value
        function getColor(d) {
            return d > 550 ? '#723122' :
                d > 450 ? '#8B4225' :
                    d > 350 ? '#A25626' :
                        d > 300 ? '#B86B25' :
                            d > 250 ? '#CA8323' :
                                d > 200 ? '#E6B71E' :
                                    d > 150 ? '#EED322' :
                                        d > 50 ? '#F2F12D' :
                                            '#000000';
        }
        function getCrimeColor(d) {
            return d > 10 ? '#723122' :
                d > 8 ? '#8B4225' :
                    d > 7 ? '#A25626' :
                        d > 6 ? '#B86B25' :
                            d > 5 ? '#CA8323' :
                                d > 3 ? '#E6B71E' :
                                    d > 2 ? '#EED322' :
                                        d > 1 ? '#F2F12D' :
                                            '#000000';
        }
        
        function processData(allText) {
            var allTextLines = allText.split(/\r\n|\n/);
            var headers = allTextLines[0].split(',');
            lines = [];


            for (var i = 1; i < allTextLines.length; i++) {
                var data = allTextLines[i].split(',');
                if (data.length == headers.length) {
                    var object = new Object;
                    for (var j = 0; j < headers.length; j++) {
                        header = headers[j]
                        value = data[j]
                        object[header] = value
                    }
                    lines.push(object);
                }
            }
            //alert(lines);
            return lines;
        }
        function filter() {
            var budget = parseInt(document.getElementById("bgt").value);

            var objects = table;

            var list = [];
            for (var i = 0; i < objects.length; i++) {
                var object = objects[i];
                if (object != null && object["median"] != "" &&
                    parseInt(object["median"]) > budget - 50 && parseInt(object["median"]) < budget + 50) {
                    if(object["year"] == "2018")
                        list.push(object);
                }
            }
            list.sort((a, b) => (a.median > b.median) ? 1 : -1)
            for (var i = 0; i < list.length; i++) {
                var filterList = document.getElementById('list');
                filterList.innerHTML += '<a href="#" class="list-group-item list-group-item-action flex-column align-items-start">   <div class="d-flex w-100 justify-content-between" > <h5 class="mb-1">'
                    + list[i]["region"] + " - $" + list[i]["median"] + '</h5> <small class="text-muted" >' + list[i]["LGA_Code"] + '</small> </div> <p class="mb-1">'
                    + "Type: " + list[i]["type"] + ". Num of bedroom: " + parseInt(list[i]["bedroom"]) + '</p> </a>';

            }
           
            //return list;
            
        }
        
        var getItems = function ()
            /*function getItems(objects, lgaCode, attriName, attriValue, year = "", yearValue = "")*/ {
            if (arguments.length < 2)
                return;
            var objects = arguments[0];
            var lgaCode = arguments[1];

            var args = new Object;
            for (var i = 2; i < arguments.length; i = i + 2) {
                args[arguments[i]] = arguments[i+1]
            }

            var list = [];
            for (var i = 0; i < objects.length; i++) {
                var object = objects[i];
                if (object != null && parseInt(object["LGA_Code"]) == parseInt(lgaCode)) {

                    for (var j = 0; j < Object.keys(args).length; j++) {
                        attriName = Object.keys(args)[j];
                        attriValue = Object.values(args)[j];

                        if (attriValue != null && attriName != null &&
                            isNumber(attriValue) ? parseInt(object[attriName]) == parseInt(attriValue) : object[attriName].toUpperCase() == attriValue.toUpperCase()
                        )
                            //if (year != "" && yearValue != "")
                            //    if (object["year"] == yearValue && object["median"] != "")
                            //        list.push(object);
                            //    else
                            //        continue;
                            //else
                            if (object["median"] != "" && object["year"] == "2018")
                                list.push(object);
                    }
                }
            }
            return list;
        }

        function getItem(object, name) {
            return object != null ? object[name] : 0
        }

        function getMonthFromString(mon) {
            return new Date(Date.parse(mon + " 1, 2012")).getMonth() + 1
        }

        function isNumber(str) {
            val = parseInt(str)
            if (isNaN(val))
                return false;
            return true;
        }

        function processNumber(str) {
            val = parseInt(str)
            if (isNaN(val))
                return str;
            return val;
        }
                                //options = {
                                //    tableUrl: 'Rental_Report_with_LGA_Code.csv',
                                //    tableNumericField: 'median',
                                //    tableIdField: 'LGA_Code',
                                //    geometryUrl: 'https://raw.githubusercontent.com/kasaluoqi/root/master/LGA_2018_AUST_VIC_ID.geojson',
                                //    geometryIdField: 'LGA_CODE18',
                                //    binCount: 20,
                                //    colorScheme: 'Spectral',
                                //    legendElement: '#legend'
                                //}
                                //let c = new MapboxChoropleth({ options }).addTo(map);

    </script>

</body>

