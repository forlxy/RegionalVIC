#pragma checksum "C:\Users\kasal\source\repos\kasaluoqi\RegionalVIC\RegionalVIC\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "929719fc4b6413d6a0949cab76786a10e3723fff"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"929719fc4b6413d6a0949cab76786a10e3723fff", @"/Views/Home/Index.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\kasal\source\repos\kasaluoqi\RegionalVIC\RegionalVIC\Views\Home\Index.cshtml"
  
    ViewBag.Title = "Home Page";

#line default
#line hidden
            BeginContext(41, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(45, 520, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b7422a2254d04fd1952388f6ec13e62a", async() => {
                BeginContext(51, 507, true);
                WriteLiteral(@"
    <meta charset='utf-8' />
    <title>Demo</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.1/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.1/mapbox-gl.css' rel='stylesheet' />
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/chart.js@2.8.0""></script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(565, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(569, 15947, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6ffb148806ef4a6e8765f895fe3a7d92", async() => {
                BeginContext(575, 15934, true);
                WriteLiteral(@"

    <div class=""row"">
        <div class=""col-md-8"">
            <div id=""map"" style=""height:500px""></div>
        </div>
        <div class=""col-md-4"">
            <h2>Chart</h2>
            <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
            <p><a class=""btn btn-default"" href=""https://go.microsoft.com/fwlink/?LinkId=301867"">Learn more &raquo;</a></p>
            <canvas id=""myChart""></canvas>
        </div>
    </div>



    <script>
        var lines;
        var table;


        const TOKEN = ""pk.eyJ1Ijoia2FzYWx1b3FpIiwiYSI6ImNqbHZ2OW53bTB5aHozcW9kcDJibndycXUifQ.SeWM7HbI0owT-Rwuv14Ntg"";

        mapboxgl.accessToken = TOKEN;
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/light-v9',
            //style: 'mapbox://styles/mapbox/light-v9',
            center: [145.045837, -37.876823],
            zoom: 13
        });

        var hove");
                WriteLiteral(@"redStateId = null;


        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
        var myData;
        var rcMap;
        function formRegionColorMap() {
            rcMap = new Map();
            rcMap.set('20110', getRandomColor());
            rcMap.set('20260', getRandomColor());
            rcMap.set('20570', getRandomColor());
            rcMap.set('20660', getRandomColor());
            rcMap.set('20740', getRandomColor());
            rcMap.set('20830', getRandomColor());
            rcMap.set('20910', getRandomColor());
            rcMap.set('21010', getRandomColor());
            rcMap.set('21110', getRandomColor());
            rcMap.set('21180', getRandomColor());
            rcMap.set('21270', getRandomColor());
            rcMap.set('21370', getRandomColor())");
                WriteLiteral(@";
            rcMap.set('21450', getRandomColor());
            rcMap.set('21610', getRandomColor());
            rcMap.set('21670', getRandomColor());
            rcMap.set('21750', getRandomColor());
            rcMap.set('21830', getRandomColor());
            rcMap.set('21890', getRandomColor());
            rcMap.set('22110', getRandomColor());
            rcMap.set('22170', getRandomColor());
            rcMap.set('22250', getRandomColor());
            rcMap.set('22310', getRandomColor());
            rcMap.set('22410', getRandomColor());
            rcMap.set('22490', getRandomColor());
            rcMap.set('22620', getRandomColor());
            rcMap.set('22670', getRandomColor());
            rcMap.set('22750', getRandomColor());
            rcMap.set('22830', getRandomColor());
            rcMap.set('22910', getRandomColor());
            rcMap.set('22980', getRandomColor());
            rcMap.set('23110', getRandomColor());
            rcMap.set('23190', getRandomColor());
 ");
                WriteLiteral(@"           rcMap.set('23270', getRandomColor());
            rcMap.set('23350', getRandomColor());
            rcMap.set('23430', getRandomColor());
            rcMap.set('23670', getRandomColor());
            rcMap.set('23810', getRandomColor());
            rcMap.set('23940', getRandomColor());
            rcMap.set('24130', getRandomColor());
            rcMap.set('24210', getRandomColor());
            rcMap.set('24250', getRandomColor());
            rcMap.set('24330', getRandomColor());
            rcMap.set('24410', getRandomColor());
            rcMap.set('24600', getRandomColor());
            rcMap.set('24650', getRandomColor());
            rcMap.set('24780', getRandomColor());
            rcMap.set('24850', getRandomColor());
            rcMap.set('24900', getRandomColor());
            rcMap.set('24970', getRandomColor());
            rcMap.set('25060', getRandomColor());
            rcMap.set('25150', getRandomColor());
            rcMap.set('25250', getRandomColor());
     ");
                WriteLiteral(@"       rcMap.set('25340', getRandomColor());
            rcMap.set('25430', getRandomColor());
            rcMap.set('25490', getRandomColor());
            rcMap.set('25620', getRandomColor());
            rcMap.set('25710', getRandomColor());
            rcMap.set('25810', getRandomColor());
            rcMap.set('25900', getRandomColor());
            rcMap.set('25990', getRandomColor());
            rcMap.set('26080', getRandomColor());
            rcMap.set('26170', getRandomColor());
            rcMap.set('26260', getRandomColor());
            rcMap.set('26350', getRandomColor());
            rcMap.set('26430', getRandomColor());
            rcMap.set('26490', getRandomColor());
            rcMap.set('26610', getRandomColor());
            rcMap.set('26670', getRandomColor());
            rcMap.set('26700', getRandomColor());
            rcMap.set('26730', getRandomColor());
            rcMap.set('26810', getRandomColor());
            rcMap.set('26890', getRandomColor());
         ");
                WriteLiteral(@"   rcMap.set('26980', getRandomColor());
            rcMap.set('27070', getRandomColor());
            rcMap.set('27170', getRandomColor());
            rcMap.set('27260', getRandomColor());
            rcMap.set('27350', getRandomColor());
            rcMap.set('27450', getRandomColor());
            rcMap.set('27630', getRandomColor());
            rcMap.set('29399', getRandomColor());
            rcMap.set('29499', getRandomColor());
            rcMap.set('29799', getRandomColor());

            initialiseColor();
        }

        function initialiseColor() {
            //var myData = { ""VIC221"": '#EED322', ""VIC213"": '#627BC1'};
            myData = {
                ""20110"": rcMap.get('20110'),
                ""20260"": rcMap.get('20260'),
                ""20570"": rcMap.get('20570'),
                ""20660"": rcMap.get('20660'),
                ""20740"": rcMap.get('20740'),
                ""20830"": rcMap.get('20830'),
                ""20910"": rcMap.get('20910'),
                ""21");
                WriteLiteral(@"010"": rcMap.get('21010'),
                ""21110"": rcMap.get('21110'),
                ""21180"": rcMap.get('21180'),
                ""21270"": rcMap.get('21270'),
                ""21370"": rcMap.get('21370'),
                ""21450"": rcMap.get('21450'),
                ""21610"": rcMap.get('21610'),
                ""21670"": rcMap.get('21670'),
                ""21750"": rcMap.get('21750'),
                ""21830"": rcMap.get('21830'),
                ""21890"": rcMap.get('21890'),
                ""22110"": rcMap.get('22110'),
                ""22170"": rcMap.get('22170'),
                ""22250"": rcMap.get('22250'),
                ""22310"": rcMap.get('22310'),
                ""22410"": rcMap.get('22410'),
                ""22490"": rcMap.get('22490'),
                ""22620"": rcMap.get('22620'),
                ""22670"": rcMap.get('22670'),
                ""22750"": rcMap.get('22750'),
                ""22830"": rcMap.get('22830'),
                ""22910"": rcMap.get('22910'),
                ""22980"": rcMap.");
                WriteLiteral(@"get('22980'),
                ""23110"": rcMap.get('23110'),
                ""23190"": rcMap.get('23190'),
                ""23270"": rcMap.get('23270'),
                ""23350"": rcMap.get('23350'),
                ""23430"": rcMap.get('23430'),
                ""23670"": rcMap.get('23670'),
                ""23810"": rcMap.get('23810'),
                ""23940"": rcMap.get('23940'),
                ""24130"": rcMap.get('24130'),
                ""24210"": rcMap.get('24210'),
                ""24250"": rcMap.get('24250'),
                ""24330"": rcMap.get('24330'),
                ""24410"": rcMap.get('24410'),
                ""24600"": rcMap.get('24600'),
                ""24650"": rcMap.get('24650'),
                ""24780"": rcMap.get('24780'),
                ""24850"": rcMap.get('24850'),
                ""24900"": rcMap.get('24900'),
                ""24970"": rcMap.get('24970'),
                ""25060"": rcMap.get('25060'),
                ""25150"": rcMap.get('25150'),
                ""25250"": rcMap.get('25250')");
                WriteLiteral(@",
                ""25340"": rcMap.get('25340'),
                ""25430"": rcMap.get('25430'),
                ""25490"": rcMap.get('25490'),
                ""25620"": rcMap.get('25620'),
                ""25710"": rcMap.get('25710'),
                ""25810"": rcMap.get('25810'),
                ""25900"": rcMap.get('25900'),
                ""25990"": rcMap.get('25990'),
                ""26080"": rcMap.get('26080'),
                ""26170"": rcMap.get('26170'),
                ""26260"": rcMap.get('26260'),
                ""26350"": rcMap.get('26350'),
                ""26430"": rcMap.get('26430'),
                ""26490"": rcMap.get('26490'),
                ""26610"": rcMap.get('26610'),
                ""26670"": rcMap.get('26670'),
                ""26700"": rcMap.get('26700'),
                ""26730"": rcMap.get('26730'),
                ""26810"": rcMap.get('26810'),
                ""26890"": rcMap.get('26890'),
                ""26980"": rcMap.get('26980'),
                ""27070"": rcMap.get('27070'),
         ");
                WriteLiteral(@"       ""27170"": rcMap.get('27170'),
                ""27260"": rcMap.get('27260'),
                ""27350"": rcMap.get('27350'),
                ""27450"": rcMap.get('27450'),
                ""27630"": rcMap.get('27630'),
                ""29399"": rcMap.get('29399'),
                ""29499"": rcMap.get('29499'),
                ""29799"": rcMap.get('29799')
            };
        }



        formRegionColorMap();

        map.on('load', function () {
            // Add a layer showing the places.
            map.addSource(""states"", {
                ""type"": ""geojson"",
                ""data"": ""https://raw.githubusercontent.com/kasaluoqi/root/master/LGA_2018_AUST_VIC_ID.geojson""
            });

            map.addLayer({
                ""id"": ""state-fills"",
                ""type"": ""fill"",
                ""source"": ""states"",
                ""layout"": {},
                ""paint"": {
                    ""fill-color"":
                        [""get"", [""to-string"", [""get"", ""LGA_CODE18""]], [""litera");
                WriteLiteral(@"l"", myData]],
                    ""fill-opacity"": [""case"",
                        [""boolean"", [""feature-state"", ""hover""], false],
                        0.7,
                        0.3
                    ]
                }
            });

            map.addLayer({
                ""id"": ""state-borders"",
                ""type"": ""line"",
                ""source"": ""states"",
                ""layout"": {},
                ""paint"": {
                    ""line-color"": ""#627BC1"",
                    ""line-width"": 2
                }
            });




            // When the user moves their mouse over the state-fill layer, we'll update the
            // feature state for the feature under the mouse.
            map.on(""mousemove"", ""state-fills"", function (e) {
                if (e.features.length > 0) {
                    if (hoveredStateId) {
                        map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                    }
          ");
                WriteLiteral(@"          hoveredStateId = e.features[0].id;
                    map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: true });
                }
            });

            // When the mouse leaves the state-fill layer, update the feature state of the
            // previously hovered feature.
            map.on(""mouseleave"", ""state-fills"", function () {
                if (hoveredStateId) {
                    map.setFeatureState({ source: 'states', id: hoveredStateId }, { hover: false });
                }
                hoveredStateId = null;
            });


            var ctx = document.getElementById('myChart').getContext('2d');
            var chart = new Chart(ctx);

            map.on('click', 'state-fills', function (e) {

                var lgaCode = e.features[0].properties.LGA_CODE18;
                var name = e.features[0].properties.LGA_NAME18;
                if (table != null) {

                    var list = getItems(table, lgaCode, ""bedroom"",");
                WriteLiteral(@" ""1"")
                    list.sort((a, b) => (a.year > b.year) ? 1 : (getMonthFromString(a.month) > getMonthFromString(b.month)) ? 1 : -1)
                    var data = [];
                    var labels = [];
                    for (var i = 0; i < list.length; i++) {
                        labels.push(getMonthFromString(getItem(list[i], ""month"")) + ""/"" + getItem(list[i], ""year""));
                        data.push(getItem(list[i], ""median""));
                    }

                    if (data != null && labels != null) {
                        chart.destroy();
                        ctx = document.getElementById(""myChart"").getContext(""2d"");
                        chart = new Chart(ctx, {
                            // The type of chart we want to create
                            type: 'line',

                            // The data for our dataset
                            data: {
                                labels: labels,
                                datasets: [{
   ");
                WriteLiteral(@"                                 label: 'Price median',
                                    fill: false,
                                    backgroundColor: 'rgb(255, 99, 132)',
                                    borderColor: 'rgb(255, 99, 132)',
                                    data: data
                                }]
                            },

                            // Configuration options go here
                            options: {}
                        });

                    }
                }

                new mapboxgl.Popup()
                    .setLngLat(e.lngLat)
                    .setHTML(""LGA Code: "" + lgaCode + "", Name: "" + name)
                    .addTo(map);
            });
        });

        $(document).ready(function () {
            $.ajax({
                type: ""GET"",
                url: ""Rental_Report_with_LGA_Code.csv"",
                dataType: ""text"",
                success: function (data) {
                    table ");
                WriteLiteral(@"= processData(data);
                }
            });
        });

        function processData(allText) {
            var allTextLines = allText.split(/\r\n|\n/);
            var headers = allTextLines[0].split(',');
            lines = [];


            for (var i = 1; i < allTextLines.length; i++) {
                var data = allTextLines[i].split(',');
                if (data.length == headers.length) {
                    var object = new Object;
                    for (var j = 0; j < headers.length; j++) {
                        header = headers[j]
                        value = data[j]
                        object[header] = value
                    }
                    lines.push(object);
                }
            }
            //alert(lines);
            return lines;
        }


        function getItems(objects, lgaCode, attriName, attriValue) {
            var list = [];
            for (var i = 0; i < objects.length; i++) {
                object = objec");
                WriteLiteral(@"ts[i];
                if (object != null && parseInt(object[""LGA_Code""]) == parseInt(lgaCode)) {
                    if (attriValue != null && attriName != null && parseInt(object[attriName]) == parseInt(attriValue))
                        list.push(object);
                }
            }
            return list;
        }

        function getItem(object, name) {
            return object[name]
        }

        function getMonthFromString(mon) {
            return new Date(Date.parse(mon + "" 1, 2012"")).getMonth() + 1
        }

    </script>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
